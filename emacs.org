#+title Emacs configuration
#+property: header-args:emacs-lisp :tangle ./init.el :mkdirp yes :results none
 
* Package management
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el"
                           user-emacs-directory))
        (bootstrap-vesrion 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
* Keep Folders Clean
#+begin_src emacs-lisp
(use-package no-littering)
#+end_src
* Env Variables
#+begin_src emacs-lisp
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

#+begin_src emacs-lisp
  (cl-case system-type
    ('gnu/linux (setq yadisk-path "~/yadisk"
                      org-path "~/org"
                      root-path "~/miniconda3/envs/root_env/bin/root"))
    ('windows-nt (setq yadisk-path (concat (getenv "USERPROFILE") "/YandexDisk")
                       org-path (concat (getenv "USERPROFILE") "/YandexDisk/org")
                       root-path "C:\\root_v6.28.00\\bin\\root.exe"))
    )
#+end_src

#+begin_src emacs-lisp
    (setq my/bib-files (list (concat yadisk-path "/phd/phd.bib")))
#+end_src
* Coding
#+begin_src emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8)
  (setq-default coding-system-for-read 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
* Basic UI Configuration
** Basics
Some toggles
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (menu-bar-mode -1)   ;; Disable menu bar
  (tool-bar-mode -1)   ;; Disable tool bar
  (scroll-bar-mode -1) ;; Disable visible scrollbar
  (tooltip-mode -1)    ;; Disable tooltips
  (set-fringe-mode 10) ;; some spacing around

  ;; Don't pop up UI dialogs when prompting
  (setq use-dialog-box nil)

  ;; Flashes when you hit limits
  (setq visible-bell t)

  (column-number-mode)
#+end_src

Some history
#+begin_src emacs-lisp
  ;; Open recent files
  (recentf-mode 1)

  ;; Save what you entered into minibuffer prompts
  (setq history-length 25)
  (savehist-mode 1)

  ;; Remember and restore the last cursor location of opened files
  (save-place-mode 1)
#+end_src

Custom variables
#+begin_src emacs-lisp
  ;; Move customization variables to a separate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))

  (load custom-file 'noerror 'nomessage)
#+end_src

Some reverts
#+begin_src emacs-lisp
  ;; Revert the buffers when the underlying file has changed
  (global-auto-revert-mode 1)

  ;; Revert Dired and other buffers when files in folder added for example
  (setq global-auto-revert-none-file-buffers t)
#+end_src
** Theme
#+begin_src emacs-lisp
  ;; Load customizable theme
  (load-theme 'modus-vivendi t)
#+end_src
** Font Configuration

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 130)
  (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 130)
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 140)
#+end_src

* Autocompletion
Good guide [[https://kristofferbalintona.me/posts/202202211546/][here]].
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-count 13)                    ; Number of candidates to display
    (vertico-resize t)
    (vertico-cycle nil) ; Go from last to first candidate and first to last (cycle)?
    :config
    (vertico-mode))
#+end_src

This tab messes up with Julia Tab special symbols completion feature
#+begin_comment
#+begin_src emacs-lisp
;;function to implement a smarter TAB (EmacsWiki)
(defun smart-tab ()
  "This smart tab is minibuffer compliant: it acts as usual in
    the minibuffer. Else, if mark is active, indents region. Else if
    point is at the end of a symbol, expands it. Else indents the
    current line."
  (interactive)
  (if (minibufferp)
      (unless (minibuffer-complete)
        (hippie-expand nil))
    (if mark-active
        (indent-region (region-beginning)
                       (region-end))
      (if (looking-at "\\_>")
         (hippie-expand nil)
        (indent-for-tab-command)))))
(global-set-key (kbd "TAB") 'smart-tab)
#+end_src
#+end_comment

This will make Ctrl-TAB do the same Alt-TAB doing for completion in jupyter session for example. This will also desable Alt-TAB from switching windows releasing ot for completion function (on Windows only).
#+begin_src emacs-lisp
(define-key function-key-map [(control tab)] [?\M-\t])
(when (fboundp 'w32-register-hot-key) (w32-register-hot-key [M-tab]))
#+end_src

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless))      ; Use orderless
    (completion-category-defaults nil)    ; I want to be in control!
    (completion-category-overrides
     '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
                     orderless)))))
#+end_src

#+begin_src emacs-lisp
  ;; to show additional columns of info
  (use-package marginalia
    :config (marginalia-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src
* Embark
#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command))
#+end_src
* Advanced UI
# Does not works, no tangling #TODO
#+begin_src emacs-lisp :tangle no
  (straight-use-package
   '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))
  ;; (require 'nano)
  (require 'nano-theme)
  (require 'nano-modeline)
  ;;(nano-dark)
#+end_src

#+begin_src emacs-lisp
;; parences rainbow highliht
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+begin_src emacs-lisp
  ;; Shows available keys at the bottom
  (use-package which-key
    :defer 0
    :diminish  which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src

#+begin_src emacs-lisp
  ;; Should provide extended help but it does not somehow
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] .  helpful-key))
#+end_src

#+begin_src emacs-lisp
  ;; Suff for key bindings
  (use-package general
    :after evil
    :config
    (general-evil-setup t)
    (general-create-definer rune/leader-keys
      :keymaps '(normal insrt visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    ;; Here bind some keys
    (general-define-key
     (kbd "<escape>") 'keyboard-escape-quit)

    (rune/leader-keys
      "g" '(magit :which-key "magit")
      "t" '(:ignore t :which-key "toggles")
      "tt" '(consult-theme :which-key "choose-theme")
      "tz" '(writeroom-mode :which-key "zen mode")
      "f" '(:ignore t :which-key "files")
      "ff" '(consult-recent-file :which-key "recent files")
      "fd" '(dired :which-key "dired")
      "fr" '(ranger :which-key "ranger")
      "tn" '(display-line-numbers-mode :which-key "line numbers")
      "p" '(consult-projectile :which-key "select projects")
      "b" '(consult-buffer :which-key "select buffer")
      "s" '(:ignore t :which-key "search")
      "sr" '(my/org-roam-rg-search :which-key "search roam files")
      "w" '(ace-window :which-key "windows")))

#+end_src


#+begin_src emacs-lisp
  ;; Previews stuff and plays nicely with vertico or similar
  (use-package consult
    :general
    ("M-y" 'consult-yank-from-kill-ring
     "C-x b" 'consult-buffer))
#+end_src

#+begin_src emacs-lisp
  (defun my/org-roam-rg-search ()
    "Search org-roam directory using consult-ripgrep. With live-preview."
    (interactive)
    (let ((consult-ripgrep-command "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS"))
      (consult-ripgrep org-roam-directory)))
  (global-set-key (kbd "C-c rr") 'my/org-roam-rg-search)
#+end_src

#+begin_src emacs-lisp
  (use-package embark-consult)
#+end_src
#+begin_src emacs-lisp
  ;; Use `consult-completion-in-region' if Vertico is enabled.
  ;; Otherwise use the default `completion--in-region' function.
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))
#+end_src

#+begin_src emacs-lisp
  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

#+begin_src emacs-lisp
  (use-package dired-single)
#+end_src

#+begin_src emacs-lisp
  (use-package dired
    :after evil-collection
    :straight nil
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :after evil-collection
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src
* Windows
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t)
  (setq aw-dispatch-always t)
#+end_src
#+begin_src emacs-lisp
(use-package writeroom-mode)
#+end_src
* Evil
#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode))
#+end_src

#+begin_src emacs-lisp
  ;; Good mode with bad name
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump  nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; Make ESC quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (evil-set-undo-system 'undo-tree)
    ;; Turn off unused stuff to release C-. for embark
    (define-key evil-normal-state-map (kbd "C-.") nil)
    (define-key evil-normal-state-map (kbd "M-.") nil)
    )
#+end_src

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-textobj-tree-sitter
    :straight t)
#+end_src

* Hydra stuff
#+begin_src emacs-lisp
  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
* Projects
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode +1)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/code")
      (setq projectile-project-search-project-path '("~/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package consult-projectile
    :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master"))
#+end_src
* Files / folders
#+begin_src emacs-lisp
(when (equal system-type 'gnu/linux)
  (use-package direnv
     :config
     (direnv-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package ranger
    :straight t
    :after dired
    :custom (ranger-show-hidden t)
    )
#+end_src

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode)
              ;; (dired-sort-toggle-or-edit)
              ))
#+end_src
* Git
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Org mode
#+begin_src emacs-lisp
  (defun my/org-mode-setup ()
    (org-indent-mode)
    (valign-mode)
    ;; (variable-pitch-mode 1)
    ;; (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (setq org-image-actual-width nil)
    )

  (use-package org
    :hook (org-mode . my/org-mode-setup)
    ;; :custom
    ;; (org-latex-compiler "xelatex")
    :config
    (setq org-ellipsis " ▾"
          ;; org-hide-emphasis-markers t
          org-src-fontify-natively t))
#+end_src
** Languages
#+begin_src emacs-lisp
  ;; Don't request confirm when evaluating certaing languages
  (defun my/org-confirm-babel-evaluate (lang body)
    (not (or (string= lang "jupyter-python")
             (string= lang "python")
             (string= lang "julia")
             (string= lang "jupyter-julia")
             (string= lang "C++")
             ;(string= lang "cern-root")
             (string= lang "emacs-lisp"))))
  (setq org-confirm-babel-evaluate 'my/org-confirm-babel-evaluate)
#+end_src
** Auto tangle
#+begin_src emacs-lisp
  (defun my/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/emacs.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

** Roam
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** LaTeX
This is for coloring exported code using Emacs native code coloring
#+begin_src emacs-lisp
  (use-package engrave-faces)
  (setq org-latex-src-block-backend 'engraved)
#+end_src

#+begin_src emacs-lisp
  (require 'org)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src
** Templates
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("pj" . "src jupyter-python"))
  (add-to-list 'org-structure-template-alist '("jl" . "src julia"))
  (add-to-list 'org-structure-template-alist '("jj" . "src jupyter-julia"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src C++"))
  ;(add-to-list 'org-structure-template-alist '("root" . "src cern-root"))
#+end_src

** Remarks
#+begin_src emacs-lisp
  (use-package org-remark)
#+end_src
** Images
#+begin_src emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+end_src
** Tables
#+begin_src emacs-lisp
  (use-package valign)
#+end_src
* Development
** Languages
*** Python
#+begin_src emacs-lisp
  (use-package pyvenv)
#+end_src
#+begin_src emacs-lisp
  (custom-set-variables '(python-shell-interpreter "ipython"))
#+end_src

#+begin_src emacs-lisp
  ;; This does not works with dir-locals setting pyvenv
  ;; as both try to ask simething in minibuffer
  ;; and second question invocation breaks first one
  ;; with complain about running minibuffer from minibuffer
  ;; (add-hook 'python-mode-hook 'eglot-ensure)
#+end_src
*** C/C++
#+begin_src emacs-lisp
  (use-package cern-root-mode
    :bind (:map c++-mode-map
               (("C-c C-c" . cern-root-eval-defun)
                ("C-c C-b" . cern-root-eval-buffer)
                ("C-c C-l" . cern-root-eval-file)
                ("C-c C-r" . cern-root-eval-region)))
    :straight (cern-root-mode :type git :host github :repo "jaypmorgan/cern-root-mode")
    :config
    (setq cern-root-filepath root-path))
#+end_src
*** Julia
#+begin_src emacs-lisp
  (use-package julia-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package  julia-repl)
  (add-hook 'julia-mode-hook 'julia-repl-mode) ;; always use minor mode
  (add-hook 'julia-mode-hook 'company-mode)
  (add-hook 'julia-mode-hook 'company-quickhelp-mode)
  (add-hook 'julia-mode-hook 'eglot-jl-init)
  (add-hook 'julia-mode-hook 'eglot-ensure)
  (add-hook 'julia-mode-hook 'ts-fold-indicators-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package eglot-jl)
#+end_src

*** Haskell
*** Language Servers
#+begin_src emacs-lisp
  (use-package eglot)
#+end_src

#+begin_src emacs-lisp
  (use-package consult-eglot)
#+end_src
*** Jupyter
#+begin_src emacs-lisp
  (use-package jupyter)
#+end_src

#+begin_src emacs-lisp
  (use-package ein) 
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (latex . t)
       (julia . t)
       (python . t)
       ;; (ein . t)
       (C . t)
       ;(cern-root . t)
       (jupyter . t)
       ))
    (push '("conf-unix" . conf-unix) org-src-lang-modes) )
#+end_src

*** Completion
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src

# Commented out
#+begin_src emacs-lisp :tangle no
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package company-quickhelp)
#+end_src
*** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
*** Tree-Sitter
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (global-tree-sitter-mode)
#+end_src
#+begin_src emacs-lisp
  (use-package ts-fold
    :straight (ts-fold :type git :host github :repo "emacs-tree-sitter/ts-fold"))
#+end_src

#+begin_src emacs-lisp
  (use-package ts-fold-indicators
    :straight (ts-fold-indicators :type git :host github :repo "emacs-tree-sitter/ts-fold"))
#+end_src
* Terminal
** VTerm
#+begin_src emacs-lisp
  (when (equal system-type 'gnu/linux)
    (use-package vterm))
#+end_src
** EShell
#+begin_src emacs-lisp
  (use-package eshell-git-prompt)
  (use-package eshell
    :config
    (eshell-git-prompt-use-theme 'powerline))
#+end_src
* Math
#+begin_src emacs-lisp
(use-package org-fragtog)
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    )
  (add-hook 'pdf-view-mode-hook (blink-cursor-mode -1))
#+end_src

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :custom
    (org-roam-directory (concat org-path "/roam"))
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package citar
    :after oc
    :bind (("C-c b" . citar-insert-citation)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    :custom
    (citar-bibliography my/bib-files)
    (citar-library-paths (list (concat yadisk-path "/phd/papers")))
    (citar-notes-paths (list (concat org-path "/roam/references")))
    (citar-file-extensions '("pdf" "org" "md"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (org-cite-export-processors '((latex biblatex) (t csl)))
    (org-support-shift-select t)
    (org-cite-global-bibliography my/bib-files)
    )
#+end_src

#+begin_src emacs-lisp
  (use-package org-ref)
#+end_src

#+begin_src emacs-lisp
  (use-package org-roam-bibtex)
#+end_src

#+begin_src emacs-lisp
  (use-package djvu)
#+end_src

#+begin_src emacs-lisp
  (setq
   org-startup-with-latex-preview t
   )
#+end_src
#+begin_src emacs-lisp
  (use-package org-noter)
#+end_src
* Spelling
#+begin_src emacs-lisp :tangle no
  ;; (setq ispell-program-name "C:/msys64/mingw64/bin/aspell.exe")
  (setq
   ispell-russian-dictionary "russian"
   ispell-english-dictionary "english")

  (custom-set-variables
   ;; i like aspell, and you?
   '(ispell-program-name "C:/msys64/mingw64/bin/aspell.exe")

  ; my dictionary-alist, using for redefinition russian dictionary
   '(ispell-dictionary-alist
     '(("russian"  ;; Russian
        "\\cy"
        "\\Cy" 
        "[-]"
        nil
        ("-C" "-d" "ru-yeyo.multi"
         nil utf-8))
       ("english"                       ; English
        "[a-zA-Z]"
        "[^a-zA-Z]"
        "[']"
        nil
        ("-d" "en_GB.multi" "--add-extra-dicts=en_GB-variant_1.multi"
         nil iso-8859-1))
       (nil ;; Default
        "[A-Za-z]"
        "[^A-Za-z]"
        "[']"
        nil
        ("-C"
         nil iso-8859-1))))
   '(flyspell-default-dictionary ispell-russian-dictionary)
   '(ispell-dictionary ispell-english-dictionary)
   '(ispell-local-dictionary ispell-russian-dictionary)
   '(ispell-extra-args '("--sug-mode=ultra" "--prefix=C:/msys64/mingw64"))
   )
#+end_src
* Mail
#+begin_src emacs-lisp
  (when (equal system-type 'gnu/linux)
    (use-package mu4e
      :straight nil
      :load-path "/usr/share/emacs/site-lisp/mu4e/"
      :defer 20 ; Wait until 20 seconds after startup
      :config
      (mu4e t)

      (setq mu4e-headers-buffer-name "*mu4e-headers*")
      ;; This is set to 't' to avoid mail syncing issues when using mbsync
      (setq mu4e-change-filenames-when-moving t)

      ;; Refresh mail using isync every 10 minutes
      (setq mu4e-update-interval (* 10 60))
      (setq mu4e-get-mail-command "mbsync gmail")
      (setq mu4e-maildir "~/Mail")

      (setq mu4e-drafts-folder "/Drafts")
      (setq mu4e-sent-folder   "/Sent")
      (setq mu4e-refile-folder "/Archive")
      (setq mu4e-trash-folder  "/Trash")

      ;; (setq mu4e-maildir-shortcuts
      ;;       '(("/Inbox" . ?i)
      ;;         ("/Sent" . ?s)
      ;;         ("/Trash" . ?t)
      ;;         ("/Drafts" . ?d)
      ;;         ("/Archive" . ?a)))
      ;;
      ))
#+end_src


